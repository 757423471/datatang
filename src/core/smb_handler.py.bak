# -*- coding: utf-8 -*-
import os
import re
import Queue
import tempfile
from cStringIO import StringIO
from smb.smb_structs import OperationFailure
from smb.SMBConnection import SMBConnection
from smb.smb_constants import *
from base.workstation import WorkStation
from settings import SMB_SETTINGS as ss
from settings import logger


class SMBConnFactory(object):
	def __init__(self, *args, **kwargs):
		self.username = ss['username']
		self.password = ss['password']
		self.client_name = ss['client_name']
		self.server_name = ss['server_name']
		self.use_ntlm_v2 = ss['use_ntlm_v2']

		self.ip = ss['host']
		self.port = ss['port']

	def create(self):
		logger.info('connecting to smb server on %s:%s' % (self.ip, self.port))
		smb_conn = SMBConnection(self.username, self.password, self.client_name, self.server_name, use_ntlm_v2=self.use_ntlm_v2)
		smb_conn.connect(self.ip, self.port)
		logger.info('connected')
		return smb_conn


class SMBConnProxy(SMBConnection):
	"""class to provide stable connection"""
	def __init__(self, *args, **kwargs):
		SMBConnection.__init__(self, kwargs.get('username', ss['username']), 
			kwargs.get('password', ss['password']), kwargs.get('my_name', ss['client_name']), 
			kwargs.get('remote_name', ss['server_name']), use_ntlm_v2=kwargs.get('use_ntlm_v2', ss['use_ntlm_v2']))
		self.status = self.__connect()

	def __connect(self):
		conn_cnt = 0
		logger.info('connecting to smb server on %s:%s' % (ss['host'], ss['port']))
		while conn_cnt < ss.get('reconnect_times', 3):
			self.status = SMBConnection.connect(self, ss['host'], port=ss['port'], timeout=ss['connect_timeout'])
			if self.status:	
				logger.info('connected to the smb server')
				return True
			else:
				conn_cnt += 1
				logger.info('connecting failed, times to reconnect: %d' % conn_cnt)

		return False

	def close(self):
		if self.status:
			# TODO: add exception handlers for close
			SMBConnection.close(self)
			self.status = False
			logger.info('connection to smb server is closed')

	def is_connected(self):
		try:
			# test if the connection has not been reset by the remote side
			self.echo('test', timeout=ss['echo_timeout'])
			return True
		except NotConnectedError, e:	# TODO: add a specific error
			return False

	def connect(self):
		while not self.status:
			self.status = self.__connect()
			if not self.status:
				interval = random.randint(0, ss.get('reconnect_interval', MAX_INTERVAL))
				logger.info('connection will be established in %ss' % interval)
				time.sleep(interval)


class SMBVisitor(WorkStation):
	"""base class to access smb in multithreading"""
	proxy_queue = Queue.Queue()
	smb_conn_factory = None

	def __init__(self, src_queue, dst_queue):
		super(SMBVisitor, self).__init__(src_queue, dst_queue)
		# refer the object
		self.smb_conn = self.smb_conn_factory.create()

	@classmethod
	# kwargs = {service_name, path, search=55, pattern='*', timeout=30}
	def set_up(cls, *args, **kwargs):
		cls.smb_conn_factory = SMBConnFactory()
		smb_conn = cls.smb_conn_factory.create()
		try:
			shared_device, root_dir = args
			search = SMB_FILE_ATTRIBUTE_NORMAL | SMB_FILE_ATTRIBUTE_READONLY |  SMB_FILE_ATTRIBUTE_DIRECTORY | SMB_FILE_ATTRIBUTE_ARCHIVE
			pattern = kwargs.get('pattern', '*')

			# if root_dir is a path to dir
			shared_dirs = [ root_dir ]
		except ValueError, e:
			logger.error('shared device and path are not specified')

		try:
			# extracted until no files existed
			while shared_dirs:
				path= shared_dirs.pop()

				# classifies files in the list, 
				shared_files = smb_conn.listPath(shared_device, path, search, pattern)
				for item in shared_files:
					if item.filename.startswith('.'):
						continue
					if item.isDirectory:
						shared_dirs.append(os.path.join(path, item.filename))
					else:
						cls.proxy_queue.put((shared_device, os.path.join(path, item.filename)))
						print os.path.join(path, item.filename)
		except OperationFailure, e:
			logger.error('unable to conntect to shared device')
		else:
			return cls.proxy_queue


class SMBConsigner(SMBVisitor):
	"""retrive files from smb servers"""
	def __init__(self, src_queue, dst_queue):
		super(SMBConsigner, self).__init__(src_queue, dst_queue)

	# get the list of files when a root directory was given
	# kwargs['dirs'] = ('/E/path/to/a', '/F/path/to/b', ...)
	@classmethod
	def set_up(cls, *args, **kwargs):

		dirs = args if args else kwargs.get('dirs', [])
		if not dirs:
			logger.warning('interested dirs are not specified')
		else:
			for dir_path in dirs:
				r = re.match('^/(?P<service_name>.+?)/(?P<path>.+)$', dir_path, re.UNICODE)
				if r:
					super(SMBConsigner, cls).set_up(r.group('service_name'), r.group('path'))
				else:
					logger.error('unable to parse the dir: %s' % dir_path)
					raise ValueError("path is not specified as required")


	def process(self, raw_data):
		service_name, path = raw_data
		try:
			file_obj = StringIO()
			self.smb_conn.retrieveFile(service_name, path, file_obj)
			raw_data = file_obj.getvalue()
			file_obj.close()
			return (raw_data, os.path.basename(path))
		except OperationFailure, e:
			logger.error('unable to retrieve files in path %s' % path)
			raise e


class SMBConsignee(SMBVisitor):
	"""upload files to smb servers"""
	def __init__(self, src_queue, dst_queue):
		super(SMBConsignee, self).__init__(src_queue, dst_queue)

	def run(self):
		pass

		


